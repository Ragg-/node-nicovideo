// Generated by CoffeeScript 1.8.0

/**
 * ひとつのリストと対応する マイリストのインターフェースです。
 * Backbone.Collectionを継承しています。
 *
 * Methods
 *  - isDefaultList(): boolean
 *       このリストが"とりあえずマイリスト"か判定します。
 *  - attr(attr: string)
 *       マイリストの属性（プロパティ）を取得します。
 *  - add(movie: NicoVideoInfo|string)
 *       マイリストに動画を追加します。
 *       引数には動画IDを指定することができます。
 *       (Backbone.Collection#addは実行されません。)
 *
 * Events
 *  (Backbone.Collection で発生するイベント)
 *
 * Properties
 *  attrメソッドを介して取得します。（とりあえずマイリストの場合、属性は一切設定されません。）
 *      Example: mylist.attr("id") // -> マイリストIDを取得
 *  - id             : number    -- マイリストID
 *  - name           : string    -- リスト名
 *  - description    : string    -- マイリストの説明
 *  - public         : boolean   -- 公開マイリストかどうか
 *  - iconId         : number    -- マイリストのアイコンID
 *  - defaultSort    : number    -- 標準のソート方法（？）
 *  - sortOrder      : number    -- ソート方式（？）
 *  - userId         : number    -- ユーザー番号
 *  - createTime     : Date      -- マイリストの作成日
 *  - updateTime     : Date      -- マイリストの更新日
 */

(function() {
  var Backbone, MyList, MyListItem, NicoUrl, request, sprintf, _, _instances,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ = require("underscore");

  Backbone = require("backbone");

  request = require("request");

  sprintf = require("sprintf").sprintf;

  NicoUrl = require("../NicoUrl");

  MyListItem = require("./MyListItem");

  _instances = {};


  /**
   * マイリストマイリストグループ（一つのリスト）のコレクションです。
   * Backbone.Collectionを継承しています。
   */

  MyList = (function(_super) {
    __extends(MyList, _super);

    MyList.prototype._attributes = {
      id: -1,
      name: null,
      description: null,
      "public": null,
      iconId: -1,
      defaultSort: -1,
      sortOrder: -1,
      userId: -1,
      createTime: null,
      updateTime: null
    };

    MyList.prototype._urlSet = null;

    MyList.prototype._api = null;


    /*
     * @param {MyListMeta} metaInfo 操作対象の MyListMetaのインスタンス。
     */

    function MyList(metaInfo) {
      var id;
      id = metaInfo.attr("id");
      this._attributes = metaInfo.toJSON();
      if (_instances[id] != null) {
        return _instances[id];
      }
      this._urlSet = this.isDefaultList() ? NicoUrl.MyList.DefList : NicoUrl.MyList.Normal;
      this._api = metaInfo._api;
      Backbone.Collection.apply(this);
    }

    MyList.prototype.initialize = function() {
      return this.fetch();
    };

    MyList.prototype.isDefaultList = function() {
      return this.attr("id") === "default";
    };


    /**
     * マイリストのアイテムを取得します。
     * @return {Promise}
     */

    MyList.prototype.fetch = function(options) {
      var dfd, self, url;
      self = this;
      dfd = Promise.defer();
      url = null;
      url = sprintf(this._urlSet.LIST, this.attr("id"));
      request.get({
        url: url,
        json: true
      }, function(err, res, bodyJson) {
        if (err != null) {
          dfd.reject(sprintf("MyList[id:%s]: Failed to fetch contents (Connection error: %s)", self.attr("id"), err));
          return;
        }
        if (bodyJson.status !== "ok") {
          dfd.reject(sprintf("MyList[id:%s]: Failed to fetch contents (unknown)"));
          return;
        }
        _.each(bodyJson.mylistitem.reverse(), function(item) {
          var m;
          m = MyListItem.fromApiJson(item);
          return self.set(m, _.extend({
            merge: false
          }, options, {
            add: true,
            remove: false
          }));
        });
        return dfd.resolve();
      });
      return dfd.promise;
    };


    /**
     * マイリストのメタ情報を取得します。
     * @param {string}   attr    取得する属性名
     */

    MyList.prototype.attr = function(attr) {
      return this._attributes[attr];
    };


    /**
     * マイリストに動画を追加します。
     * @param {NicoVideoInfo|string} movie   追加する、動画情報か動画ID
     * @param {string?}              desc    マイリストの動画メモの内容
     * @return {Promise} 動画の追加に成功すればresolve、失敗した時はエラーメッセージとともにrejectされます。
     */

    MyList.prototype.add = function(movie, desc) {
      var data, dfd, id, self;
      if (desc == null) {
        desc = "";
      }
      self = this;
      dfd = Promise.defer();
      id = null;
      if (!_.isString(movie) && (movie.id != null)) {
        return Promise.reject("動画IDが正しくありません");
      } else {
        id = _.isString(movie) ? movie : movie.id;
      }
      data = {
        item_type: 0,
        item_id: id,
        token: null,
        description: desc,
        group_id: this.attr("id")
      };
      this.isDefaultList() && (delete data.group_id);
      this._api.fetchToken["catch"](function(err) {
        return dfd.reject(error);
      }).then(function(token) {
        data.token = token;
        return request.post({
          url: self._urlSet.ADD,
          form: data,
          json: true
        }, function(err, res, apiResult) {
          if (apiResult.status === "ok") {
            dfd.resolve();
            self.fetch();
          } else {
            dfd.reject(sprintf("MyList[%s]: Failed to add item (reason: %s)", self.attr("id"), res.error.description));
          }
        });
      });
      return dfd.promise;
    };

    return MyList;

  })(Backbone.Collection);

  module.exports = MyList;

}).call(this);
