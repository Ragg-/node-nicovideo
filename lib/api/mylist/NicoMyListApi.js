// Generated by CoffeeScript 1.8.0

/**
 * ニコニコ動画のマイリスト操作APIのラッピングを行います。
 * （参考: http://efcl.info/wiki/niconicoapi/）
 *
 * Methods
 * - fetchListsIndex(withoutDefList: boolean?): Promise
 *       マイリストの一覧情報を取得します。
 *
 *       withoutDefListにtrueを指定すると"とりあえずマイリスト"を一覧から除外します。
 *       取得に成功したら{Array.<MyListItemIndex>}をresolveし、
 *       失敗した時はエラーメッセージとともにrejectされます。
 *
 * - fetchMyList(id: MyListItemIndex|number?): Promise
 *       指定されたMyListItemIndexまたはidと対応する、MyListインスタンスを取得します。
 *       取得できればMyListオブジェクトと共にresolveされ、
 *       そうでなければエラーメッセージと共にrejectされます
 *
 * Events
 *   (none)
 *
 * Properties
 *   (none)
 */

(function() {
  var FETCH_INTERVAL, MyList, MyListMeta, NicoMyListApi, TOKEN_REGEXP, request, _;

  _ = require("underscore");

  request = require("request");

  MyListMeta = require("./MyListIndex");

  MyList = require("./MyList");

  FETCH_INTERVAL = 60 * 1000;

  TOKEN_REGEXP = /NicoAPI.token = "([0-9a-z\-]*)";/;

  NicoMyListApi = (function() {
    var fetchMyList;

    NicoMyListApi.prototype._ticket = null;

    NicoMyListApi.prototype._token = {
      timestamp: null,
      token: null
    };

    function NicoMyListApi(ticket) {
      this._ticket = ticket;
      this._token = _.clone(this._token);
    }


    /**
     * マイリストを操作するためのトークンを取得します。
     * @return {Promise}
     */

    NicoMyListApi.prototype.fetchToken = function() {
      var dfd;
      if ((_token.token != null) && (Date.now() - _token.timestamp) < FETCH_INTERVAL) {
        return Promise.resolve(_token.token);
      }
      dfd = Promise.defer();
      request.get({
        url: NicoUrl.MyList.FETCH_TOKEN,
        jar: this._ticket.getCookieJar()
      }, function(err, res, body) {
        var token;
        if (err != null) {
          dfd.reject("NicoMyListApi: " + err);
          return;
        }
        token = TOKEN_REGEXP.exec(body);
        if (token[1] != null) {
          this._token.timestamp = Date.now();
          this._token.token = token[1];
          return dfd.resolve(token[1]);
        } else {
          dfd.reject("NicoMyListApi: Failed to pick token.");
        }
      });
      return dfd.promise;
    };


    /**
     * 割り当てられている認証チケットを取得します。
     */

    NicoMyListApi.prototype.getTicket = function() {
      return this._ticket;
    };


    /**
     * マイリストの簡略な一覧情報を取得します。
     * @param    {boolean} withoutDefList
     *   trueを指定すると"とりあえずマイリスト"を一覧から除外します。
     * @return   {Promise}
     *   取得に成功したら{Array.<MyListItemIndex>}をresolveします。
     *   失敗した時はエラーメッセージとともにrejectされます。
     */

    NicoMyListApi.prototype.fetchMyListsIndex = function(withoutDefList) {
      var dfd, lists, self;
      if (withoutDefList == null) {
        withoutDefList = false;
      }
      self = this;
      dfd = Promise.defer();
      lists = [];
      request.get({
        url: NicoUrl.MyList.GET_GROUPS,
        json: true
      }, function(err, res, bodyJson) {
        if (err != null) {
          dfd.reject(error);
          return;
        }
        if (bodyJson.status !== "ok") {
          dfd.reject("Failed to mylist fetch. (reason unknown)");
          return;
        }
        _.each(res.mylistgroup, function(group) {
          lists.push(new MyListMeta(group, self));
        });
        if (withoutDefList !== true) {
          lists.push(new MyListMeta(null, self));
        }
        dfd.resolve(lists);
      });
      return dfd.promise;
    };


    /**
     * MyListインスタンスを取得します。
     *
     * @param    {MyListItemIndex|number} id
     *   MyListItemIndexかマイリストIDを渡します。
     * @return   {Promise(MyList, string)}
     *   取得できればMyListオブジェクトと共にresolveされ、
     *   そうでなければエラーメッセージと共にrejectされます
     */

    fetchMyList = function(id) {
      var dfd, getInstanceDfd;
      if (id == null) {
        id = "default";
      }
      dfd = Promise.defer();
      getInstanceDfd = Promise.defer();
      if (id instanceof MyListMeta) {
        getInstanceDfd.resolve(new MyList(id));
      } else {
        if (id !== "default") {
          id = id | 0;
        }
        this.getMyListIndex().then(function(groups) {
          _.each(groups, function(obj) {
            if (obj.id === id) {
              getInstanceDfd.resolve(new MyList(obj));
              return false;
            }
          });
          getInstanceDfd.reject("Can't find specified mylist.");
        });
      }
      getInstanceDfd.then(function(instance) {
        return instance.fetch().then(function() {
          dfd.resolve(instance);
        }, function(msg) {
          dfd.reject(msg);
        });
      });
      return dfd.promise;
    };

    return NicoMyListApi;

  })();

  module.exports = NicoMyListApi;

}).call(this);
