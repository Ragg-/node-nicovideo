// Generated by CoffeeScript 1.8.0

/**
 * ニコニコ生放送のコメント情報モデル。
 * Backbone.Modelを継承しています。
 *
 * Methods
 *  - NicoLiveComment.fromPlainXml(xml: string)
 *       コメントサーバーのレスポンスからNicoLiveCommentインスタンスを生成します。
 *
 *  - isControl(): boolean
 *       コメントが運営の制御コメントか判定します。
 *  - isDistributorPost(): boolean
 *       コメントが配信者のものか判定します。
 *  - isMyPost(): boolean
 *       コメントが自分で投稿したものか判定します。
 *
 * Properties
 *  - threadId   : number  -- コメントサーバー内のスレッドID
 *  - date       : Date    -- コメント投稿日時
 *  - locale     : string  -- 投稿元国情報("ja-jp", "jp"など、詳細不明)
 *  - command    : string  -- コメント投稿時に設定されたコマンド(184など)
 *  - isMyPost   : boolean -- 自分で投稿したコメントか
 *  - user                 -- 投稿したユーザー情報
 *      - id             : number|string -- ユーザー番号(匿名コメントの場合は文字列）
 *      - score          : number        -- このユーザーのNGスコア
 *      - accountType    : number        -- アカウント種別(0:一般, 1:プレミアム, 3:配信者)
 *      - isPremium      : boolean       -- プレミアム会員かどうか
 *      - isAnonymous    : boolean       -- 匿名コメントかどうか
 */

(function() {
  var Backbone, NicoLiveComment, REGEXP_GT, REGEXP_LT, cheerio, noop, _fromRawXml,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Backbone = require("backbone");

  cheerio = require("cheerio");

  REGEXP_LT = /</g;

  REGEXP_GT = />/g;

  noop = function() {};

  NicoLiveComment = (function(_super) {
    __extends(NicoLiveComment, _super);

    function NicoLiveComment() {
      return NicoLiveComment.__super__.constructor.apply(this, arguments);
    }

    NicoLiveComment.prototype.defaults = {
      threadId: null,
      date: null,
      locale: null,
      command: null,
      comment: null,
      isMyPost: null,
      user: {
        id: null,
        score: 0,
        accountType: -1,
        isPremium: false,
        isAnonymous: false
      }
    };

    NicoLiveComment.prototype.isControl = function() {
      var accountType, userid;
      userid = this.get("user").id;
      accountType = this.get("user").accountType;
      return (userid === 900000000) || (userid === 0) || (accountType === 6);
    };

    NicoLiveComment.prototype.isDistributorPost = function() {
      return this.get("user").accountType === 3;
    };

    NicoLiveComment.prototype.isMyPost = function() {
      return this.get("isMyPost");
    };

    NicoLiveComment.prototype.parse = noop;

    NicoLiveComment.prototype.fetch = noop;

    NicoLiveComment.prototype.sync = noop;

    NicoLiveComment.prototype.save = noop;

    NicoLiveComment.prototype.destroy = noop;

    return NicoLiveComment;

  })(Backbone.Model);


  /**
   * 規定の形式のXMLからNicoLiveCommentモデルを生成します。
   *
   * ニコ生サーバーから配信されてくる以下のような形式のコメント（１行）を第１引数に渡してください。
   *   <chat thread="##" vpos="##" date="##" date_usec="##" user_id="##" premium="#" locale="**">コメント内容</chat>
   *
   * @param {string} xml ニコ生コメントサーバーから受信したXMLコメントデータ
   */

  _fromRawXml = function(xml) {
    var $xml, obj;
    $xml = cheerio(xml);
    obj = {
      threadId: $xml.attr("thread"),
      date: new Date($xml.attr("date") | 0 * 1000),
      locale: $xml.attr("locale"),
      command: $xml.attr("mail"),
      comment: $xml.text().replace(REGEXP_GT, ">").replace(REGEXP_LT, "<"),
      isMyPost: $xml.attr("yourpost") === "1",
      user: {
        id: $xml.attr("user_id"),
        score: $xml.attr("score") | 0,
        accountType: $xml.attr("premium") | 0,
        isPremium: ($xml.attr("premium") | 0) > 0,
        isAnonymous: $xml.attr("anonymity") | 0 !== 0
      }
    };
    if (obj.user.id && obj.user.id.match(/^[0-9]*$/)) {
      obj.user.id = obj.user.id | 0;
    }
    return new NicoLiveComment(obj);
  };

  module.exports.fromRawXml = _fromRawXml;

}).call(this);
