// Generated by CoffeeScript 1.8.0
(function() {
  var AuthTicket, Backbone, NicoUrl, cheerio, request, sprintf, _;

  _ = require("underscore");

  Backbone = require("backbone");

  cheerio = require("cheerio");

  request = require("request");

  sprintf = require("sprintf").sprintf;

  NicoUrl = require("./NicoURL");

  AuthTicket = (function() {
    _.extend(AuthTicket.prototype, Backbone.Event);

    AuthTicket.prototype._user = null;

    AuthTicket.prototype._pass = null;

    AuthTicket.prototype._sessionKey = false;

    AuthTicket.prototype._promise = null;

    AuthTicket.prototype._cookieJar = null;

    function AuthTicket(user, password) {
      this._user = user;
      this._pass = password;
      this._cookieJar = request.jar();
      this._login();
    }

    AuthTicket.prototype._login = function() {
      var dfd, self;
      if ((this._user == null) || (this._pass == null)) {
        return;
      }
      self = this;
      dfd = Promise.defer();
      this._promise = dfd.promise;
      request.post({
        url: NicoUrl.Auth.LOGIN,
        jar: this._cookieJar,
        form: {
          mail_tel: this._user,
          password: this._pass
        }
      }, function(err, resp, body) {
        console.error(err);
        console.dir(resp);
        if (resp.statusCode === 503) {
          dfd.reject("Nicovideo has in maintenance.");
          return;
        }
        if (resp.headers["x-niconico-authflag"] !== "0") {

        } else {
          dfd.reject("Authorize failed");
          return;
        }
        if (err != null) {
          console.error(err, NicoUrl.Auth.LOGIN);
          dfd.reject("Authorize failed by connection problem (" + err + ")");
          return;
        }
        self._cookieJar._jar.store.findCookie("nicovideo.jp", "/", "user_session", function(err, cookie) {
          if (cookie != null) {
            self._sessionKey = cookie.value;
            return dfd.resolve(self);
          } else if (err != null) {
            return dfd.reject(err);
          } else {
            return dfd.reject();
          }
        });
      });
      return dfd.promise;
    };

    AuthTicket.prototype._logout = function() {
      return request.post({
        url: NicoUrl.Auth.LOGOUT,
        jar: this._jar
      });
    };

    AuthTicket.prototype.isLogged = function() {
      return this._sessionKey !== false;
    };

    AuthTicket.prototype.isLoging = function() {
      var dfd;
      dfd = Promise.defer();
      request.get({
        url: NicoUrl.Auth.LOGINTEST,
        jar: this._cookieJar
      }, function(err, resp, resBody) {
        var $err, $res;
        if (err !== null) {
          dfd.reject(err);
        }
        $res = cheerio(resBody);
        $err = $res.find("error code");
        if ($err.length === 0) {
          return dfd.resolve();
        } else {
          return dfd.reject($err.text());
        }
      });
      return dfd.promise;
    };

    AuthTicket.prototype.setSessionId = function(key) {
      this._sessionKey = key;
    };

    AuthTicket.prototype.getSessionId = function() {
      return this._sessionKey;
    };

    AuthTicket.prototype.getCookieJar = function() {
      var expireDate, jar, sessionId;
      jar = request.jar();
      sessionId = this.getSessionId();
      expireDate = new Date(Date.now() + (1000 * 60 * 60 * 24 * 31)).toGMTString();
      jar._jar.setCookieSync("user_session=" + sessionId + "; expires=" + expireDate + "; path=/; domain=.nicovideo.jp", "http://www.nicovideo.jp/", {});
      return jar;
    };

    AuthTicket.prototype.loginThen = function(resolved, rejected) {
      this._promise.then(resolved, rejected);
    };

    module.exports = AuthTicket;

    return AuthTicket;

  })();

}).call(this);
